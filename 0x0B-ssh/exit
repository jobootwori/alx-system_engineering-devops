SSH-COPY-ID(1)  BSD General Commands Manual  SSH-COPY-ID(1)

NNAAMMEE
     sssshh--ccooppyy--iidd — use locally available keys to authorise
     logins on a remote machine

SSYYNNOOPPSSIISS
     sssshh--ccooppyy--iidd [--ff] [--nn] [--ss] [--ii [_i_d_e_n_t_i_t_y___f_i_l_e]]
                 [--pp _p_o_r_t] [--oo _s_s_h___o_p_t_i_o_n] [_u_s_e_r@]_h_o_s_t_n_a_m_e
     sssshh--ccooppyy--iidd --hh | --?

DDEESSCCRRIIPPTTIIOONN
     sssshh--ccooppyy--iidd is a script that uses ssh(1) to log into a
     remote machine (presumably using a login password, so
     password authentication should be enabled, unless
     you've done some clever use of multiple identities).
     It assembles a list of one or more fingerprints (as
     described below) and tries to log in with each key, to
     see if any of them are already installed (of course,
     if you are not using ssh-agent(1) this may result in
     you being repeatedly prompted for pass-phrases).  It
     then assembles a list of those that failed to log in,
     and using ssh, enables logins with those keys on the
     remote server.  By default it adds the keys by append‐
     ing them to the remote user's _~_/_._s_s_h_/_a_u_t_h_o_r_i_z_e_d___k_e_y_s
     (creating the file, and directory, if necessary).  It
     is also capable of detecting if the remote system is a
     NetScreen, and using its ‘set ssh pka-dsa key ...’
     command instead.

     The options are as follows:

     --ii _i_d_e_n_t_i_t_y___f_i_l_e
             Use only the key(s) contained in _i_d_e_n_t_i_t_y___f_i_l_e
             (rather than looking for identities via
             ssh-add(1) or in the ddeeffaauulltt__IIDD__ffiillee).  If the
             filename does not end in _._p_u_b this is added.
             If the filename is omitted, the
             ddeeffaauulltt__IIDD__ffiillee is used.

             Note that this can be used to ensure that the
             keys copied have the comment one prefers
             and/or extra options applied, by ensuring that
             the key file has these set as preferred before
             the copy is attempted.

     --ff      Forced mode: doesn't check if the keys are
             present on the remote server.  This means that
             it does not need the private key.  Of course,
             this can result in more than one copy of the
             key being installed on the remote system.

     --nn      do a dry-run.  Instead of installing keys on
             the remote system simply prints the key(s)
             that would have been installed.

     --ss      SFTP mode: usually the public keys are in‐
             stalled by executing commands on the remote
             side.  With this option the user's
             _~_/_._s_s_h_/_a_u_t_h_o_r_i_z_e_d___k_e_y_s file will be down‐
             loaded, modified locally and uploaded with
             sftp.  This option is useful if the server has
             restrictions on commands which can be used on
             the remote side.

     --hh, --?  Print Usage summary

     --pp _p_o_r_t, --oo _s_s_h___o_p_t_i_o_n
             These two options are simply passed through
             untouched, along with their argument, to allow
             one to set the port or other ssh(1) options,
             respectively.

             Rather than specifying these as command line
             options, it is often better to use (per-host)
             settings in ssh(1)'s configuration file:
             ssh_config(5).

     Default behaviour without --ii, is to check if ‘ssh-add
     -L’ provides any output, and if so those keys are
     used.  Note that this results in the comment on the
     key being the filename that was given to ssh-add(1)
     when the key was loaded into your ssh-agent(1) rather
     than the comment contained in that file, which is a
     bit of a shame.  Otherwise, if ssh-add(1) provides no
     keys contents of the ddeeffaauulltt__IIDD__ffiillee will be used.

     The ddeeffaauulltt__IIDD__ffiillee is the most recent file that
     matches: _~_/_._s_s_h_/_i_d_*_._p_u_b, (excluding those that match
     _~_/_._s_s_h_/_*_-_c_e_r_t_._p_u_b) so if you create a key that is not
     the one you want sssshh--ccooppyy--iidd to use, just use touch(1)
     on your preferred key's _._p_u_b file to reinstate it as
     the most recent.

EEXXAAMMPPLLEESS
     If you have already installed keys from one system on
     a lot of remote hosts, and you then create a new key,
     on a new client machine, say, it can be difficult to
     keep track of which systems on which you've installed
     the new key.  One way of dealing with this is to load
     both the new key and old key(s) into your
     ssh-agent(1).  Load the new key first, without the --cc
     option, then load one or more old keys into the agent,
     possibly by ssh-ing to the client machine that has
     that old key, using the --AA option to allow agent for‐
     warding:

           user@newclient$ ssh-add
           user@newclient$ ssh -A old.client
           user@oldl$ ssh-add -c
           ... prompt for pass-phrase ...
           user@old$ logoff
           user@newclient$ ssh someserver

     now, if the new key is installed on the server, you'll
     be allowed in unprompted, whereas if you only have the
     old key(s) enabled, you'll be asked for confirmation,
     which is your cue to log back out and run

           user@newclient$ ssh-copy-id -i someserver

     The reason you might want to specify the -i option in
     this case is to ensure that the comment on the in‐
     stalled key is the one from the _._p_u_b file, rather than
     just the filename that was loaded into your agent.  It
     also ensures that only the id you intended is in‐
     stalled, rather than all the keys that you have in
     your ssh-agent(1).  Of course, you can specify another
     id, or use the contents of the ssh-agent(1) as you
     prefer.

     Having mentioned ssh-add(1)'s --cc option, you might
     consider using this whenever using agent forwarding to
     avoid your key being hijacked, but it is much better
     to instead use ssh(1)'s _P_r_o_x_y_C_o_m_m_a_n_d and --WW option, to
     bounce through remote servers while always doing di‐
     rect end-to-end authentication. This way the middle
     hop(s) don't get access to your ssh-agent(1).  A web
     search for ‘ssh proxycommand nc’ should prove enlight‐
     ening (N.B. the modern approach is to use the --WW op‐
     tion, rather than nc(1)).

SSEEEE AALLSSOO
     ssh(1), ssh-agent(1), sshd(8)

BSD                    June 17, 2010                    BSD
